// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PdfManagerApp.Infrastructure;

#nullable disable

namespace PdfManagerApp.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231203154407_AddedHistoricalTextSearch")]
    partial class AddedHistoricalTextSearch
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("PdfManagerApp.Domain.Entities.BookDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("book_details", (string)null);
                });

            modelBuilder.Entity("PdfManagerApp.Domain.Entities.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AbsolutePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PdfAmount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("folders", (string)null);
                });

            modelBuilder.Entity("PdfManagerApp.Domain.Entities.HistoricalBookDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileNameWithExtension")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("HistoricalFolderId")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HistoricalFolderId");

                    b.ToTable("historical_book_details", (string)null);
                });

            modelBuilder.Entity("PdfManagerApp.Domain.Entities.HistoricalFolder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AbsolutePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SearchLogId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SearchLogId");

                    b.ToTable("historical_folders", (string)null);
                });

            modelBuilder.Entity("PdfManagerApp.Domain.Entities.SearchLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("SearchFinishReason")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SeekedPhrasesJsonList")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("search_logs", (string)null);
                });

            modelBuilder.Entity("PdfManagerApp.Domain.Entities.SearchResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("FoundOnPage")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("HistoricalBookDetailId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sentence")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HistoricalBookDetailId");

                    b.ToTable("search_results", (string)null);
                });

            modelBuilder.Entity("PdfManagerApp.Domain.Entities.BookDetail", b =>
                {
                    b.HasOne("PdfManagerApp.Domain.Entities.Folder", "Folder")
                        .WithMany("BookDetails")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("PdfManagerApp.Domain.Entities.HistoricalBookDetail", b =>
                {
                    b.HasOne("PdfManagerApp.Domain.Entities.HistoricalFolder", "HistoricalFolder")
                        .WithMany("HistoricalBookDetails")
                        .HasForeignKey("HistoricalFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistoricalFolder");
                });

            modelBuilder.Entity("PdfManagerApp.Domain.Entities.HistoricalFolder", b =>
                {
                    b.HasOne("PdfManagerApp.Domain.Entities.SearchLog", "SearchLog")
                        .WithMany("HistoricalFolders")
                        .HasForeignKey("SearchLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SearchLog");
                });

            modelBuilder.Entity("PdfManagerApp.Domain.Entities.SearchResult", b =>
                {
                    b.HasOne("PdfManagerApp.Domain.Entities.HistoricalBookDetail", "HistoricalBookDetail")
                        .WithMany("SearchResults")
                        .HasForeignKey("HistoricalBookDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistoricalBookDetail");
                });

            modelBuilder.Entity("PdfManagerApp.Domain.Entities.Folder", b =>
                {
                    b.Navigation("BookDetails");
                });

            modelBuilder.Entity("PdfManagerApp.Domain.Entities.HistoricalBookDetail", b =>
                {
                    b.Navigation("SearchResults");
                });

            modelBuilder.Entity("PdfManagerApp.Domain.Entities.HistoricalFolder", b =>
                {
                    b.Navigation("HistoricalBookDetails");
                });

            modelBuilder.Entity("PdfManagerApp.Domain.Entities.SearchLog", b =>
                {
                    b.Navigation("HistoricalFolders");
                });
#pragma warning restore 612, 618
        }
    }
}
